"""
WGDdetector

a pipeline for whole genome duplication (WGD) detecting with the genome or transcriptome annotations

ref. Yang et al 2019 https://doi.org/10.1186/s12859-019-2670-3
"""

from pathlib import Path
import sys


configfile: "config/config.yaml"


outdir = Path(config["outdir"])
logdir = Path(config["logdir"])
tmpdir = Path(config["tmpdir"])

input_pep = config["input_pep"]
input_cds = config["input_cds"]

run_name = config["name"]

filtered_pep_fasta = outdir / f"{run_name}.pep.filt.fa"
filtered_cds_fasta = outdir / f"{run_name}.cds.filt.fa"
genenum_seqid_mapping_table = outdir / f"{run_name}.id.table"

orthomcl_file = (
    outdir / "mcl" / f"{run_name}.pep.filt_nrm_dmls_bit.orthomcl"
)  # all-protein-clustering.result
# FIXME: It may be better to use the same naming convention as Yang et al., to not confuse the eventual user.

protein_similarity_engine = config["cluster_engine"]
available_protein_similarity_engine = ["blastp", "mmseqs2"]
if protein_similarity_engine not in ["blastp", "mmseqs2"]:
    raise ValueError(
        f'`cluster_engine` "{protein_similarity_engine}" is not supported Choose one among {available_protein_similarity_engine}.'
    )

cluster_step_folder = outdir / config["folder_names"]["cluster_step"]

blastp_input_fasta = filtered_pep_fasta
blastp_blast_tsv = cluster_step_folder / "blastp" / f"{run_name}.pep.filt.blastp.tsv"
blast_db_path = cluster_step_folder / "blastp" / "db" / run_name


mmseqs2_input_fasta = filtered_pep_fasta
mmseqs2_db_path = cluster_step_folder / "mmseqs2" / "db" / f"{run_name}"
mmseqs2_out_db_path = cluster_step_folder / "mmseqs2" / f"{run_name}"
mmseqs2_blast_tsv = cluster_step_folder / "mmseqs2" / f"{run_name}.pep.filt.blastp.tsv"

if protein_similarity_engine == "blastp":
    all_vs_all_blast_tsv = blastp_blast_tsv
elif protein_similarity_engine == "mmseqs2":
    all_vs_all_blast_tsv = mmseqs2_blast_tsv

# cluster_output_file = outdir / config["folder_names"]["cluster_step"] / config["file_names"]["protein_cluster"]
cluster_output_file = cluster_step_folder / "mcl" / f"{run_name}.pep.filt.orthomcl"


include: "rules/phase_id.smk"
include: "rules/protein_blastp.smk"
include: "rules/protein_mmseqs2.smk"
include: "rules/mcl.smk"
include: "rules/ks_clustering.smk"
include: "rules/muscle_align.smk"


rule all:
    input:
        all_vs_all_blast_tsv,
        cluster_output_file,
        # outdir
        # / config["folder_names"]["ks_estimate_step"]
        # / config["folder_names"]["ks_estimate_matrix_step"]
        # / "cluster1"
        # / "ks.dist.hcluster",


rule init:
    input:
        pep=input_pep,
        cds=input_cds,
    output:
        pep=outdir / f"{run_name}.pep.fa",
        cds=outdir / f"{run_name}.cds.fa",
    shell:
        """
        cp "{input.cds}" "{output.cds}"
        cp "{input.pep}" "{output.pep}"
        """
