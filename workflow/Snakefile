"""
WGDdetector

a pipeline for whole genome duplication (WGD) detecting with the genome or transcriptome annotations

ref. Yang et al 2019 https://doi.org/10.1186/s12859-019-2670-3
"""

from pathlib import Path


configfile: "config/config.yaml"


outdir = Path(config["outdir"])
logdir = Path(config["logdir"])
tmpdir = Path(config["tmpdir"])

input_pep = config["input_pep"]
input_cds = config["input_cds"]

run_name = config["name"]
print(run_name)

print(outdir / "blastp" / "db" / "test.pep.filt.fa")

mcl_input_prefix = outdir / "mcl" / f"{run_name}.mcl-input"

filtered_pep_fasta = outdir / f"{run_name}.pep.filt.fa"
filtered_cds_fasta = outdir / f"{run_name}.cds.filt.fa"
genenum_seqid_mapping_table = outdir / f"{run_name}.id.table"

orthomcl_file = (
    outdir / "mcl" / f"{run_name}.pep.filt.orthomcl"
)  # all-protein-clustering.result
# FIXME: It may be better to use the same naming convention as Yang et al., to not confuse the eventual user.

mmseqs2_input_fasta = filtered_pep_fasta
mmseqs2_out_db_path = outdir / "mmseqs2" / f"{run_name}"
mmseqs2_blast_tsv = outdir / "mmseqs2" / f"{run_name}.blastp.tsv"


blastp_input_fasta = filtered_pep_fasta
print(blastp_input_fasta)
blastp_tsv = outdir / "blastp" / f"{run_name}.pep.filt.fa.blastp.tsv"
blast_db_path = outdir / "blastp" / "db" / run_name


include: "rules/phase_id.smk"
include: "rules/protein_blastp_cluster.smk"
include: "rules/protein_mmseqs2_cluster.smk"
include: "rules/mcl.smk"


rule all:
    input:
        filtered_pep_fasta,
        blastp_tsv,
        # outdir / f"{run_name}_nrm_dmls_bit.abc"
        # orthomcl_file,
        # filtered_pep_fasta,
        # filtered_cds_fasta,
        # genenum_seqid_mapping_table,
        # abc_file,
        # mcl_file,
        # orthomcl_file,
        # mmseqs2_blast_tsv,


rule init:
    input:
        input_pep,
    output:
        outdir / f"{run_name}",
    shell:
        """
        cp "{input}" "{output}"
        """
